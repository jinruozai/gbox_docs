/*
 * 枚举示例 - Gbox引擎
 * 展示枚举在游戏中的应用
 */

// 游戏状态枚举
enum GameState
{
    //@name=菜单状态
    MENU = 0,
    //@name=游戏中
    PLAYING = 1,
    //@name=暂停
    PAUSED = 2,
    //@name=游戏结束
    GAME_OVER = 3
};

// 方向枚举
enum Direction
{
    UP,     // 0
    RIGHT,  // 1
    DOWN,   // 2
    LEFT    // 3
};

// 玩家类型枚举
enum PlayerType
{
    //@color=0xffff0000
    WARRIOR = 1,
    //@color=0xff0000ff
    MAGE = 2,
    //@color=0xff00ff00
    ARCHER = 3
};

// 游戏成员变量
enum GameState m_nGameState = GameState.MENU;
enum PlayerType m_nPlayerType = PlayerType.WARRIOR;
obj m_pPlayer;
int m_nScore = 0;

// 玩家类
class GPlayer : GObjShape {
    int m_nHealth = 100;
    enum Direction m_nDirection = Direction.RIGHT;
    enum PlayerType m_nType;
    float m_fSpeed = 5.0;
    
    void Init(enum PlayerType type) {
        m_nType = type;
        
        // 根据类型设置颜色
        switch(m_nType) {
            case PlayerType.WARRIOR:
                SetColor(0xffff0000);  // 红色
                m_nHealth = 150;       // 战士生命值高
                m_fSpeed = 4.0;        // 但速度慢
                break;
            case PlayerType.MAGE:
                SetColor(0xff0000ff);  // 蓝色
                m_nHealth = 80;        // 法师生命值低
                m_fSpeed = 4.5;        // 速度中等
                break;
            case PlayerType.ARCHER:
                SetColor(0xff00ff00);  // 绿色
                m_nHealth = 100;       // 弓箭手生命值中等
                m_fSpeed = 6.0;        // 速度快
                break;
        }
        
        SetPos(400, 300);
        SetSize(50, 50);
    }
    
    void Move(enum Direction dir) {
        m_nDirection = dir;
        vec2 pos;
        GetPos(pos.x, pos.y);
        
        switch(m_nDirection) {
            case Direction.UP:
                pos.y -= m_fSpeed;
                break;
            case Direction.RIGHT:
                pos.x += m_fSpeed;
                break;
            case Direction.DOWN:
                pos.y += m_fSpeed;
                break;
            case Direction.LEFT:
                pos.x -= m_fSpeed;
                break;
        }
        
        // 保持在屏幕范围内
        pos.x = :fixcal.clamp(pos.x, 25, 800 - 25);
        pos.y = :fixcal.clamp(pos.y, 25, 600 - 25);
        
        SetPos(pos.x, pos.y);
    }
    
    void TakeDamage(int amount) {
        m_nHealth -= amount;
        if(m_nHealth <= 0) {
            ChangeGameState(GameState.GAME_OVER);
        }
    }
    
    int GetHealth() {
        return m_nHealth;
    }
    
    enum PlayerType GetType() {
        return m_nType;
    }
}

// UI文本类
class GStatusText : GObjText {
    void Init() {
        SetPos(20, 20);
        SetColor(0xffffffff);
        SetFontSize(18);
    }
    
    void Update(enum GameState state, enum PlayerType type, int health, int score) {
        string stateStr, typeStr;
        
        // 将枚举转换为字符串
        switch(state) {
            case GameState.MENU:
                stateStr = "菜单";
                break;
            case GameState.PLAYING:
                stateStr = "游戏中";
                break;
            case GameState.PAUSED:
                stateStr = "暂停";
                break;
            case GameState.GAME_OVER:
                stateStr = "游戏结束";
                break;
        }
        
        switch(type) {
            case PlayerType.WARRIOR:
                typeStr = "战士";
                break;
            case PlayerType.MAGE:
                typeStr = "法师";
                break;
            case PlayerType.ARCHER:
                typeStr = "弓箭手";
                break;
        }
        
        SetText("状态: " + stateStr + "\n角色: " + typeStr + "\n生命值: " + health + "\n分数: " + score);
    }
}

// 菜单类
class GMenu : GObjText {
    void Init() {
        SetPos(300, 250);
        SetColor(0xffffffff);
        SetFontSize(24);
        UpdateMenu(m_nPlayerType);
    }
    
    void UpdateMenu(enum PlayerType type) {
        string instructions = "选择角色:\n";
        instructions += "1 - 战士" + (type == PlayerType.WARRIOR ? " [选中]" : "") + "\n";
        instructions += "2 - 法师" + (type == PlayerType.MAGE ? " [选中]" : "") + "\n";
        instructions += "3 - 弓箭手" + (type == PlayerType.ARCHER ? " [选中]" : "") + "\n";
        instructions += "\n按空格键开始游戏";
        
        SetText(instructions);
    }
}

// 游戏结束文本
class GGameOverText : GObjText {
    void Init() {
        SetPos(300, 250);
        SetColor(0xffff0000);
        SetFontSize(30);
        SetText("游戏结束!\n\n按空格键重新开始");
    }
}

// UI对象
obj m_pStatusText;
obj m_pMenu;
obj m_pGameOverText;

// 状态管理
void ChangeGameState(enum GameState newState) {
    m_nGameState = newState;
    
    switch(m_nGameState) {
        case GameState.MENU:
            if(m_pPlayer) SafeDelObj(m_pPlayer);
            m_pMenu.SetShow(true);
            m_pGameOverText.SetShow(false);
            m_nScore = 0;
            break;
            
        case GameState.PLAYING:
            m_pMenu.SetShow(false);
            m_pGameOverText.SetShow(false);
            
            // 创建玩家
            if(!m_pPlayer) {
                m_pPlayer = new GPlayer;
                m_pPlayer.Init(m_nPlayerType);
            }
            break;
            
        case GameState.PAUSED:
            // 暂停相关处理
            break;
            
        case GameState.GAME_OVER:
            m_pGameOverText.SetShow(true);
            break;
    }
    
    // 更新状态文本
    UpdateUI();
}

// 键盘输入
void HandleInput() {
    switch(m_nGameState) {
        case GameState.MENU:
            // 菜单键盘处理
            if(keyboard.IsKeyPressed(KEY_1)) {
                m_nPlayerType = PlayerType.WARRIOR;
                m_pMenu.UpdateMenu(m_nPlayerType);
            }
            else if(keyboard.IsKeyPressed(KEY_2)) {
                m_nPlayerType = PlayerType.MAGE;
                m_pMenu.UpdateMenu(m_nPlayerType);
            }
            else if(keyboard.IsKeyPressed(KEY_3)) {
                m_nPlayerType = PlayerType.ARCHER;
                m_pMenu.UpdateMenu(m_nPlayerType);
            }
            else if(keyboard.IsKeyPressed(KEY_SPACE)) {
                ChangeGameState(GameState.PLAYING);
            }
            break;
            
        case GameState.PLAYING:
            // 游戏中键盘处理
            if(keyboard.IsKeyDown(KEY_UP)) {
                m_pPlayer.Move(Direction.UP);
            }
            else if(keyboard.IsKeyDown(KEY_RIGHT)) {
                m_pPlayer.Move(Direction.RIGHT);
            }
            else if(keyboard.IsKeyDown(KEY_DOWN)) {
                m_pPlayer.Move(Direction.DOWN);
            }
            else if(keyboard.IsKeyDown(KEY_LEFT)) {
                m_pPlayer.Move(Direction.LEFT);
            }
            else if(keyboard.IsKeyPressed(KEY_ESCAPE)) {
                ChangeGameState(GameState.PAUSED);
            }
            
            // 模拟得分
            m_nScore++;
            
            // 更新UI
            UpdateUI();
            break;
            
        case GameState.PAUSED:
            // 暂停状态键盘处理
            if(keyboard.IsKeyPressed(KEY_SPACE)) {
                ChangeGameState(GameState.PLAYING);
            }
            else if(keyboard.IsKeyPressed(KEY_ESCAPE)) {
                ChangeGameState(GameState.MENU);
            }
            break;
            
        case GameState.GAME_OVER:
            // 游戏结束状态键盘处理
            if(keyboard.IsKeyPressed(KEY_SPACE)) {
                ChangeGameState(GameState.MENU);
            }
            break;
    }
}

// 更新UI
void UpdateUI() {
    int health = 0;
    if(m_pPlayer) {
        health = m_pPlayer.GetHealth();
    }
    
    m_pStatusText.Update(m_nGameState, m_nPlayerType, health, m_nScore);
}

// 游戏更新循环
void GameUpdate() {
    // 处理输入
    HandleInput();
    
    // 根据游戏状态继续更新
    
    // 安排下一次更新
    :task.AddDelayMS(16, fun#GameUpdate); // ~60 FPS
}

// 初始化游戏
void InitGame() {
    // 创建UI元素
    m_pStatusText = new GStatusText;
    m_pStatusText.Init();
    
    m_pMenu = new GMenu;
    m_pMenu.Init();
    
    m_pGameOverText = new GGameOverText;
    m_pGameOverText.Init();
    m_pGameOverText.SetShow(false);
    
    // 开始游戏循环
    GameUpdate();
}

// 输出枚举信息
void TraceEnumInfo() {
    ?"GameState.MENU = " + GameState.MENU;
    ?"GameState.PLAYING = " + GameState.PLAYING;
    ?"Direction.UP = " + Direction.UP;
    ?"Direction.RIGHT = " + Direction.RIGHT;
    ?"PlayerType.WARRIOR = " + PlayerType.WARRIOR;
    ?"PlayerType.MAGE = " + PlayerType.MAGE;
    
    // 使用系统帮助函数获取枚举信息
    var enumInfo;
    syshelp::GetClassInfo(enumInfo, "$ENUM", "GameState");
    ?"GameState枚举信息:";
    enumInfo.Trace();
}

// 入口点
void main() {
    TraceEnumInfo();
    InitGame();
} 